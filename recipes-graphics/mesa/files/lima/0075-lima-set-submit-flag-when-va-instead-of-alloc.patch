From 236a84c583401520476e0276730b096e3b50a8a8 Mon Sep 17 00:00:00 2001
From: Qiang Yu <yuq825@gmail.com>
Date: Sun, 23 Dec 2018 21:30:19 +0800
Subject: [PATCH 75/77] lima: set submit flag when va instead of alloc

Signed-off-by: Qiang Yu <yuq825@gmail.com>
---
 src/gallium/drivers/lima/lima_context.c |  9 ++--
 src/gallium/drivers/lima/lima_context.h |  6 +--
 src/gallium/drivers/lima/lima_draw.c    | 83 +++++++++++++++++----------------
 src/gallium/drivers/lima/lima_texture.c |  8 ++--
 4 files changed, 55 insertions(+), 51 deletions(-)

diff --git a/src/gallium/drivers/lima/lima_context.c b/src/gallium/drivers/lima/lima_context.c
index ce0fbc4..cf14870 100644
--- a/src/gallium/drivers/lima/lima_context.c
+++ b/src/gallium/drivers/lima/lima_context.c
@@ -45,16 +45,16 @@
 int lima_ctx_num_plb = LIMA_CTX_PLB_DEF_NUM;
 
 uint32_t
-lima_ctx_buff_va(struct lima_context *ctx, enum lima_ctx_buff buff)
+lima_ctx_buff_va(struct lima_context *ctx, enum lima_ctx_buff buff, unsigned submit)
 {
    struct lima_ctx_buff_state *cbs = ctx->buffer_state + buff;
    struct lima_resource *res = lima_resource(cbs->res);
 
    lima_bo_update(res->bo, false, true);
 
-   if (cbs->submit & LIMA_CTX_BUFF_SUBMIT_GP)
+   if (submit & LIMA_CTX_BUFF_SUBMIT_GP)
       lima_submit_add_bo(ctx->gp_submit, res->bo, LIMA_SUBMIT_BO_READ);
-   if (cbs->submit & LIMA_CTX_BUFF_SUBMIT_PP)
+   if (submit & LIMA_CTX_BUFF_SUBMIT_PP)
       lima_submit_add_bo(ctx->pp_submit, res->bo, LIMA_SUBMIT_BO_READ);
 
    return res->bo->va + cbs->offset;
@@ -71,13 +71,12 @@ lima_ctx_buff_map(struct lima_context *ctx, enum lima_ctx_buff buff)
 
 void *
 lima_ctx_buff_alloc(struct lima_context *ctx, enum lima_ctx_buff buff,
-                    unsigned size, unsigned submit, bool uploader)
+                    unsigned size, bool uploader)
 {
    struct lima_ctx_buff_state *cbs = ctx->buffer_state + buff;
    void *ret = NULL;
 
    cbs->size = align(size, 0x40);
-   cbs->submit = submit;
 
    if (uploader)
       u_upload_alloc(ctx->uploader, 0, cbs->size, 0x40, &cbs->offset,
diff --git a/src/gallium/drivers/lima/lima_context.h b/src/gallium/drivers/lima/lima_context.h
index 7e83d7d..acbe3c2 100644
--- a/src/gallium/drivers/lima/lima_context.h
+++ b/src/gallium/drivers/lima/lima_context.h
@@ -137,7 +137,6 @@ struct lima_ctx_buff_state {
    struct pipe_resource *res;
    unsigned offset;
    unsigned size;
-   unsigned submit;
 };
 
 struct lima_texture_stateobj {
@@ -269,10 +268,11 @@ lima_sampler_view(struct pipe_sampler_view *psview)
 #define LIMA_CTX_BUFF_SUBMIT_GP (1 << 0)
 #define LIMA_CTX_BUFF_SUBMIT_PP (1 << 1)
 
-uint32_t lima_ctx_buff_va(struct lima_context *ctx, enum lima_ctx_buff buff);
+uint32_t lima_ctx_buff_va(struct lima_context *ctx, enum lima_ctx_buff buff,
+                          unsigned submit);
 void *lima_ctx_buff_map(struct lima_context *ctx, enum lima_ctx_buff buff);
 void *lima_ctx_buff_alloc(struct lima_context *ctx, enum lima_ctx_buff buff,
-                          unsigned size, unsigned submit, bool uploader);
+                          unsigned size, bool uploader);
 
 void lima_state_init(struct lima_context *ctx);
 void lima_state_fini(struct lima_context *ctx);
diff --git a/src/gallium/drivers/lima/lima_draw.c b/src/gallium/drivers/lima/lima_draw.c
index b2f4236..07cf7a9 100644
--- a/src/gallium/drivers/lima/lima_draw.c
+++ b/src/gallium/drivers/lima/lima_draw.c
@@ -803,7 +803,7 @@ lima_pack_vs_cmd(struct lima_context *ctx, const struct pipe_draw_info *info)
 
    int uniform_size = ctx->vs->uniform_pending_offset + ctx->vs->constant_size + 32;
    VS_CMD_UNIFORMS_ADDRESS(
-      lima_ctx_buff_va(ctx, lima_ctx_buff_gp_uniform),
+      lima_ctx_buff_va(ctx, lima_ctx_buff_gp_uniform, LIMA_CTX_BUFF_SUBMIT_GP),
       align(uniform_size, 16));
 
    VS_CMD_SHADER_ADDRESS(ctx->vs->bo->va, ctx->vs->shader_size);
@@ -816,10 +816,12 @@ lima_pack_vs_cmd(struct lima_context *ctx, const struct pipe_draw_info *info)
    VS_CMD_UNKNOWN1();
 
    VS_CMD_ATTRIBUTES_ADDRESS(
-      lima_ctx_buff_va(ctx, lima_ctx_buff_gp_attribute_info), num_attributes);
+      lima_ctx_buff_va(ctx, lima_ctx_buff_gp_attribute_info, LIMA_CTX_BUFF_SUBMIT_GP),
+      num_attributes);
 
    VS_CMD_VARYINGS_ADDRESS(
-      lima_ctx_buff_va(ctx, lima_ctx_buff_gp_varying_info), num_varryings);
+      lima_ctx_buff_va(ctx, lima_ctx_buff_gp_varying_info, LIMA_CTX_BUFF_SUBMIT_GP),
+      num_varryings);
 
    unsigned num = info->index_size ? (info->max_index - info->min_index + 1) : info->count;
    VS_CMD_DRAW(num, info->index_size);
@@ -862,9 +864,12 @@ lima_pack_plbu_cmd(struct lima_context *ctx, const struct pipe_draw_info *info)
    }
    PLBU_CMD_PRIMITIVE_SETUP(low_prim, cull, info->index_size);
 
-   uint32_t gl_position_va = lima_ctx_buff_va(ctx, lima_ctx_buff_sh_gl_pos);
+   uint32_t gl_position_va =
+      lima_ctx_buff_va(ctx, lima_ctx_buff_sh_gl_pos,
+                       LIMA_CTX_BUFF_SUBMIT_GP | LIMA_CTX_BUFF_SUBMIT_PP);
    PLBU_CMD_RSW_VERTEX_ARRAY(
-      lima_ctx_buff_va(ctx, lima_ctx_buff_pp_plb_rsw), gl_position_va);
+      lima_ctx_buff_va(ctx, lima_ctx_buff_pp_plb_rsw, LIMA_CTX_BUFF_SUBMIT_PP),
+      gl_position_va);
 
    /* TODO
     * - we should set it only for the first draw that enabled the scissor and for
@@ -1049,7 +1054,7 @@ lima_pack_render_state(struct lima_context *ctx, const struct pipe_draw_info *in
 {
    struct lima_render_state *render =
       lima_ctx_buff_alloc(ctx, lima_ctx_buff_pp_plb_rsw,
-                          sizeof(*render), LIMA_CTX_BUFF_SUBMIT_PP, true);
+                          sizeof(*render), true);
 
    /* do hw support RGBA independ blend?
     * PIPE_CAP_INDEP_BLEND_ENABLE
@@ -1137,13 +1142,15 @@ lima_pack_render_state(struct lima_context *ctx, const struct pipe_draw_info *in
    render->aux1 = 0x00003000;
 
    if (ctx->tex_stateobj.num_samplers) {
-      render->textures_address = lima_ctx_buff_va(ctx, lima_ctx_buff_pp_tex_desc);
+      render->textures_address =
+         lima_ctx_buff_va(ctx, lima_ctx_buff_pp_tex_desc, LIMA_CTX_BUFF_SUBMIT_PP);
       render->aux0 |= ctx->tex_stateobj.num_samplers << 14;
       render->aux0 |= 0x20;
    }
 
    if (ctx->const_buffer[PIPE_SHADER_FRAGMENT].buffer) {
-      render->uniforms_address = lima_ctx_buff_va(ctx, lima_ctx_buff_pp_uniform_array);
+      render->uniforms_address =
+         lima_ctx_buff_va(ctx, lima_ctx_buff_pp_uniform_array, LIMA_CTX_BUFF_SUBMIT_PP);
       render->uniforms_address |= ((ctx->buffer_state[lima_ctx_buff_pp_uniform].size) / 4 - 1);
       render->aux0 |= 0x80;
       render->aux1 |= 0x10000;
@@ -1151,7 +1158,8 @@ lima_pack_render_state(struct lima_context *ctx, const struct pipe_draw_info *in
 
    if (ctx->vs->num_varying > 1) {
       render->varying_types = 0x00000000;
-      render->varyings_address = lima_ctx_buff_va(ctx, lima_ctx_buff_sh_varying);
+      render->varyings_address =
+         lima_ctx_buff_va(ctx, lima_ctx_buff_sh_varying, LIMA_CTX_BUFF_SUBMIT_PP);
       for (int i = 1; i < ctx->vs->num_varying; i++) {
          int val;
 
@@ -1179,7 +1187,7 @@ lima_pack_render_state(struct lima_context *ctx, const struct pipe_draw_info *in
 
    lima_dump_command_stream_print(
       render, sizeof(*render), false, "add render state at va %x\n",
-      lima_ctx_buff_va(ctx, lima_ctx_buff_pp_plb_rsw));
+      lima_ctx_buff_va(ctx, lima_ctx_buff_pp_plb_rsw, 0));
 }
 
 static void
@@ -1190,7 +1198,7 @@ lima_update_gp_attribute_info(struct lima_context *ctx, const struct pipe_draw_i
 
    uint32_t *attribute =
       lima_ctx_buff_alloc(ctx, lima_ctx_buff_gp_attribute_info,
-                          ve->num_elements * 8, LIMA_CTX_BUFF_SUBMIT_GP, true);
+                          ve->num_elements * 8, true);
 
    int n = 0;
    for (int i = 0; i < ve->num_elements; i++) {
@@ -1215,7 +1223,7 @@ lima_update_gp_attribute_info(struct lima_context *ctx, const struct pipe_draw_i
 
    lima_dump_command_stream_print(
       attribute, n * 4, false, "update attribute info at va %x\n",
-      lima_ctx_buff_va(ctx, lima_ctx_buff_gp_attribute_info));
+      lima_ctx_buff_va(ctx, lima_ctx_buff_gp_attribute_info, 0));
 }
 
 static void
@@ -1227,8 +1235,7 @@ lima_update_gp_uniform(struct lima_context *ctx)
 
    int size = vs->uniform_pending_offset + vs->constant_size + 32;
    void *vs_const_buff =
-      lima_ctx_buff_alloc(ctx, lima_ctx_buff_gp_uniform, size,
-                          LIMA_CTX_BUFF_SUBMIT_GP, true);
+      lima_ctx_buff_alloc(ctx, lima_ctx_buff_gp_uniform, size, true);
 
    if (ccb->buffer)
       memcpy(vs_const_buff, ccb->buffer, ccb->size);
@@ -1247,7 +1254,7 @@ lima_update_gp_uniform(struct lima_context *ctx)
    lima_dump_command_stream_print(
       vs_const_buff, size, true,
       "update gp uniform at va %x\n",
-      lima_ctx_buff_va(ctx, lima_ctx_buff_gp_uniform));
+      lima_ctx_buff_va(ctx, lima_ctx_buff_gp_uniform, 0));
 }
 
 static void
@@ -1261,24 +1268,22 @@ lima_update_pp_uniform(struct lima_context *ctx)
 
    uint16_t *fp16_const_buff =
       lima_ctx_buff_alloc(ctx, lima_ctx_buff_pp_uniform,
-                          const_buff_size * sizeof(uint16_t),
-                          LIMA_CTX_BUFF_SUBMIT_PP, true);
+                          const_buff_size * sizeof(uint16_t), true);
 
    uint32_t *array =
-      lima_ctx_buff_alloc(ctx, lima_ctx_buff_pp_uniform_array,
-                          4, LIMA_CTX_BUFF_SUBMIT_PP, true);
+      lima_ctx_buff_alloc(ctx, lima_ctx_buff_pp_uniform_array, 4, true);
 
    for (int i = 0; i < const_buff_size; i++)
        fp16_const_buff[i] = util_float_to_half(const_buff[i]);
 
-   *array = lima_ctx_buff_va(ctx, lima_ctx_buff_pp_uniform);
+   *array = lima_ctx_buff_va(ctx, lima_ctx_buff_pp_uniform, LIMA_CTX_BUFF_SUBMIT_PP);
 
    lima_dump_command_stream_print(
       fp16_const_buff, const_buff_size * 2, false, "add pp uniform data at va %x\n",
-      lima_ctx_buff_va(ctx, lima_ctx_buff_pp_uniform));
+      lima_ctx_buff_va(ctx, lima_ctx_buff_pp_uniform, 0));
    lima_dump_command_stream_print(
       array, 4, false, "add pp uniform info at va %x\n",
-      lima_ctx_buff_va(ctx, lima_ctx_buff_pp_uniform_array));
+      lima_ctx_buff_va(ctx, lima_ctx_buff_pp_uniform_array, 0));
 }
 
 static void
@@ -1288,18 +1293,18 @@ lima_update_varying(struct lima_context *ctx, const struct pipe_draw_info *info)
 
    uint32_t *varying =
       lima_ctx_buff_alloc(ctx, lima_ctx_buff_gp_varying_info,
-                          vs->num_varying * 8, LIMA_CTX_BUFF_SUBMIT_GP, true);
+                          vs->num_varying * 8, true);
    int n = 0;
 
    /* should be LIMA_SUBMIT_BO_WRITE for GP, but each draw will use
     * different part of this bo, so no need to set exclusive constraint */
    lima_ctx_buff_alloc(ctx, lima_ctx_buff_sh_gl_pos,
-                       4 * 4 * info->count,
-                       LIMA_CTX_BUFF_SUBMIT_GP | LIMA_CTX_BUFF_SUBMIT_PP,
-                       false);
+                       4 * 4 * info->count, false);
 
    /* for gl_Position */
-   varying[n++] = lima_ctx_buff_va(ctx, lima_ctx_buff_sh_gl_pos);
+   varying[n++] =
+      lima_ctx_buff_va(ctx, lima_ctx_buff_sh_gl_pos,
+                       LIMA_CTX_BUFF_SUBMIT_GP | LIMA_CTX_BUFF_SUBMIT_PP);
    varying[n++] = 0x8020;
 
    int offset = 0;
@@ -1318,20 +1323,20 @@ lima_update_varying(struct lima_context *ctx, const struct pipe_draw_info *info)
 
    if (vs->num_varying > 1)
       lima_ctx_buff_alloc(ctx, lima_ctx_buff_sh_varying,
-                          vs->varying_stride * info->count,
-                          LIMA_CTX_BUFF_SUBMIT_GP | LIMA_CTX_BUFF_SUBMIT_PP,
-                          false);
+                          vs->varying_stride * info->count, false);
 
    for (int i = 1; i < vs->num_varying; i++) {
       struct lima_varying_info *v = vs->varying + i;
-      varying[n++] = lima_ctx_buff_va(ctx, lima_ctx_buff_sh_varying) + v->offset;
+      varying[n++] =
+         lima_ctx_buff_va(ctx, lima_ctx_buff_sh_varying, LIMA_CTX_BUFF_SUBMIT_GP) +
+         v->offset;
       varying[n++] = (vs->varying_stride << 11) | (v->components - 1) |
          (v->component_size == 2 ? 0x0C : 0);
    }
 
    lima_dump_command_stream_print(
       varying, n * 4, false, "update varying info at va %x\n",
-      lima_ctx_buff_va(ctx, lima_ctx_buff_gp_varying_info));
+      lima_ctx_buff_va(ctx, lima_ctx_buff_gp_varying_info, 0));
 }
 
 static void
@@ -1477,22 +1482,22 @@ _lima_flush(struct lima_context *ctx, bool end_of_frame)
 
    if (vs_cmd_size) {
       void *vs_cmd =
-         lima_ctx_buff_alloc(ctx, lima_ctx_buff_gp_vs_cmd, vs_cmd_size,
-                             LIMA_CTX_BUFF_SUBMIT_GP, true);
+         lima_ctx_buff_alloc(ctx, lima_ctx_buff_gp_vs_cmd, vs_cmd_size, true);
       memcpy(vs_cmd, util_dynarray_begin(&ctx->vs_cmd_array), vs_cmd_size);
       util_dynarray_clear(&ctx->vs_cmd_array);
-      vs_cmd_va = lima_ctx_buff_va(ctx, lima_ctx_buff_gp_vs_cmd);
+      vs_cmd_va = lima_ctx_buff_va(ctx, lima_ctx_buff_gp_vs_cmd,
+                                   LIMA_CTX_BUFF_SUBMIT_GP);
 
       lima_dump_command_stream_print(
          vs_cmd, vs_cmd_size, false, "flush vs cmd at va %x\n", vs_cmd_va);
    }
 
    void *plbu_cmd =
-      lima_ctx_buff_alloc(ctx, lima_ctx_buff_gp_plbu_cmd, plbu_cmd_size,
-                          LIMA_CTX_BUFF_SUBMIT_GP, true);
+      lima_ctx_buff_alloc(ctx, lima_ctx_buff_gp_plbu_cmd, plbu_cmd_size, true);
    memcpy(plbu_cmd, util_dynarray_begin(&ctx->plbu_cmd_array), plbu_cmd_size);
    util_dynarray_clear(&ctx->plbu_cmd_array);
-   plbu_cmd_va = lima_ctx_buff_va(ctx, lima_ctx_buff_gp_plbu_cmd);
+   plbu_cmd_va = lima_ctx_buff_va(ctx, lima_ctx_buff_gp_plbu_cmd,
+                                  LIMA_CTX_BUFF_SUBMIT_GP);
 
    lima_dump_command_stream_print(
       plbu_cmd, plbu_cmd_size, false, "flush plbu cmd at va %x\n", plbu_cmd_va);
@@ -1519,7 +1524,7 @@ _lima_flush(struct lima_context *ctx, bool end_of_frame)
             float *pos = lima_ctx_buff_map(ctx, lima_ctx_buff_sh_gl_pos);
             lima_dump_command_stream_print(
                pos, 4 * 4 * 16, true, "gl_pos dump at va %x\n",
-               lima_ctx_buff_va(ctx, lima_ctx_buff_sh_gl_pos));
+               lima_ctx_buff_va(ctx, lima_ctx_buff_sh_gl_pos, 0));
          }
 
          lima_bo_update(ctx->plb[ctx->plb_index], true, false);
diff --git a/src/gallium/drivers/lima/lima_texture.c b/src/gallium/drivers/lima/lima_texture.c
index d0a8215..988eb1d 100644
--- a/src/gallium/drivers/lima/lima_texture.c
+++ b/src/gallium/drivers/lima/lima_texture.c
@@ -195,19 +195,19 @@ lima_update_textures(struct lima_context *ctx)
 
    unsigned size = lima_tex_list_size + lima_tex->num_samplers * lima_tex_desc_size;
    uint32_t *descs =
-      lima_ctx_buff_alloc(ctx, lima_ctx_buff_pp_tex_desc,
-                          size, LIMA_CTX_BUFF_SUBMIT_PP, true);
+      lima_ctx_buff_alloc(ctx, lima_ctx_buff_pp_tex_desc, size, true);
 
    for (int i = 0; i < lima_tex->num_samplers; i++) {
       off_t offset = lima_tex_desc_size * i + lima_tex_list_size;
       struct lima_sampler_state *sampler = lima_sampler_state(lima_tex->samplers[i]);
       struct lima_sampler_view *texture = lima_sampler_view(lima_tex->textures[i]);
 
-      descs[i] = lima_ctx_buff_va(ctx, lima_ctx_buff_pp_tex_desc) + offset;
+      descs[i] = lima_ctx_buff_va(ctx, lima_ctx_buff_pp_tex_desc,
+                                  LIMA_CTX_BUFF_SUBMIT_PP) + offset;
       lima_update_tex_desc(ctx, sampler, texture, (void *)descs + offset);
    }
 
    lima_dump_command_stream_print(
       descs, size, false, "add textures_desc at va %x\n",
-      lima_ctx_buff_va(ctx, lima_ctx_buff_pp_tex_desc));
+      lima_ctx_buff_va(ctx, lima_ctx_buff_pp_tex_desc, 0));
 }
-- 
2.0.1

